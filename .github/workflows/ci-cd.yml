name: CI (tests only)

on:
  push:
    branches:
      - main
      - '**'
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    env:
      JWT_PASSPHRASE: ${{ secrets.JWT_PASSPHRASE }}
    steps:
      - uses: actions/checkout@v4
      - uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, intl, ctype, iconv, dom, json, pdo_sqlite, openssl
          coverage: none
      - uses: actions/cache@v4
        with:
          path: ~/.cache/composer/files
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-
      - run: composer install --no-interaction --prefer-dist --no-progress
      - run: echo "DATABASE_URL=sqlite:///%kernel.project_dir%/var/test.db" >> .env.test.local
      - name: Generate JWT keys
        run: |
          mkdir -p config/jwt
          echo "${{ secrets.JWT_PASSPHRASE }}" > ./jwt.pass
          openssl genrsa -aes256 -passout file:./jwt.pass -out config/jwt/private.pem 4096
          openssl rsa -in config/jwt/private.pem -passin file:./jwt.pass -pubout -out config/jwt/public.pem
          rm ./jwt.pass
      - name: Configure JWT env
        run: |
          {
            echo "JWT_SECRET_KEY=%kernel.project_dir%/config/jwt/private.pem";
            echo "JWT_PUBLIC_KEY=%kernel.project_dir%/config/jwt/public.pem";
            echo "JWT_PASSPHRASE=${{ secrets.JWT_PASSPHRASE }}";
          } >> .env.test.local
      - name: Prepare schema
        run: |
          php bin/console doctrine:database:create --if-not-exists --env=test || true
          php bin/console doctrine:schema:create --env=test || true
      - run: vendor/bin/phpunit --colors=always

  notify:
    runs-on: ubuntu-latest
    needs: test
    if: always()
    env:
      WEBHOOK: ${{ secrets.GOOGLE_CHAT_WEBHOOK }}
    steps:
      - name: Post to Google Chat (simple text)
        if: ${{ env.WEBHOOK != '' }}
        env:
          STATUS: ${{ needs.test.result }}
          RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          REF: ${{ github.ref_name }}
        run: |
          echo "Sending message to Google Chatâ€¦"
          payload=$(printf '{"text":"CI: %s\nBranch/Tag: %s\nRun: %s"}' "$STATUS" "$REF" "$RUN_URL")
          curl -sSf -H 'Content-Type: application/json' -d "$payload" "$WEBHOOK"
