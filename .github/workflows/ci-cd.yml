name: CI (tests only)

on:
  push:
    branches:
      - main
      - '**'
    tags:
      - 'v*'
  workflow_dispatch:

defaults:
  run:
    working-directory: backend

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      # utile si ton bundle lit ces variables directement
      JWT_PASSPHRASE: ${{ secrets.JWT_PASSPHRASE }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, intl, ctype, iconv, dom, json, pdo_sqlite, openssl
          coverage: none

      - name: Cache Composer download cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/composer/files
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install dependencies
        run: composer install --no-interaction --prefer-dist --no-progress

      - name: Configure test DB (SQLite)
        run: echo "DATABASE_URL=sqlite:///%kernel.project_dir%/var/test.db" >> .env.test.local

      # üîê G√©n√©ration cl√©s JWT √©ph√©m√®res pour la CI
      - name: Generate JWT keys
        run: |
          mkdir -p config/jwt
          echo "${{ secrets.JWT_PASSPHRASE }}" > ./jwt.pass
          openssl genrsa -aes256 -passout file:./jwt.pass -out config/jwt/private.pem 4096
          openssl rsa -in config/jwt/private.pem -passin file:./jwt.pass -pubout -out config/jwt/public.pem
          rm ./jwt.pass

      # ‚ôªÔ∏è Variables d'env pour LexikJWTAuthenticationBundle (ou √©quivalent)
      - name: Configure JWT env
        run: |
          {
            echo "JWT_SECRET_KEY=%kernel.project_dir%/config/jwt/private.pem";
            echo "JWT_PUBLIC_KEY=%kernel.project_dir%/config/jwt/public.pem";
            echo "JWT_PASSPHRASE=${{ secrets.JWT_PASSPHRASE }}";
          } >> .env.test.local

      - name: Prepare schema
        run: |
          php bin/console doctrine:database:create --if-not-exists --env=test || true
          php bin/console doctrine:schema:create --env=test || true
          # ou: php bin/console doctrine:migrations:migrate --no-interaction --env=test

      - name: Run PHPUnit
        run: vendor/bin/phpunit --colors=always

  notify:
    runs-on: ubuntu-latest
    needs: test
    if: always()
    defaults:
      run:
        working-directory: .   # √©vite le dossier backend ici

    steps:
      - name: Post to Google Chat (simple text)
        # ‚úÖ v√©rifie bien la pr√©sence du secret c√¥t√© GitHub
        if: ${{ secrets.GOOGLE_CHAT_WEBHOOK != '' }}
        env:
          WEBHOOK: ${{ secrets.GOOGLE_CHAT_WEBHOOK }}
          STATUS: ${{ needs.test.result }}
          RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          REF: ${{ github.ref_name }}
        run: |
          echo "Sending message to Google Chat‚Ä¶"
          curl -f -s -X POST -H 'Content-Type: application/json' \
            -d "{\"text\":\"CI: ${STATUS}\nBranch/Tag: ${REF}\nRun: ${RUN_URL}\"}" \
            "${WEBHOOK}"
