name: CI (tests only)

on:
  push:
    branches:
      - main
      - '**'
    tags:
      - 'v*'
  workflow_dispatch:

defaults:
  run:
    working-directory: backend

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, intl, ctype, iconv, dom, json, pdo_sqlite
          coverage: none

      - name: Cache Composer download cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/composer/files
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install dependencies
        run: composer install --no-interaction --prefer-dist --no-progress

      - name: Configure test DB (SQLite)
        run: echo "DATABASE_URL=sqlite:///%kernel.project_dir%/var/test.db" >> .env.test.local

      - name: Prepare schema
        run: |
          php bin/console doctrine:database:create --if-not-exists --env=test || true
          php bin/console doctrine:schema:create --env=test || true
          # ou, si tu utilises des migrations :
          # php bin/console doctrine:migrations:migrate --no-interaction --env=test

      - name: Run PHPUnit
        run: vendor/bin/phpunit --colors=always

  notify:
    runs-on: ubuntu-latest
    needs: [test]
    if: always()
    env:
      GOOGLE_CHAT_WEBHOOK: ${{ secrets.GOOGLE_CHAT_WEBHOOK }}

    steps:
      - name: Send Google Chat notification (optional)
        if: ${{ env.GOOGLE_CHAT_WEBHOOK != '' }}
        uses: SimonScholz/google-chat-action@main
        with:
          webhookUrl: ${{ env.GOOGLE_CHAT_WEBHOOK }}
          message: |
            {
              "cards": [
                {
                  "header": {
                    "title": "CI Status",
                    "subtitle": "Workflow: ${{ github.workflow }}",
                    "imageUrl": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"
                  },
                  "sections": [
                    {
                      "widgets": [
                        { "keyValue": { "topLabel": "Status", "content": "${{ needs.test.result }}" } },
                        { "keyValue": { "topLabel": "Branch/Tag", "content": "${{ github.ref_name }}" } },
                        { "keyValue": { "topLabel": "Run", "content": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" } }
                      ]
                    }
                  ]
                }
              ]
            }
